<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unique Tic Tac Toe</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: radial-gradient(circle, pink, white);
            font-family: Arial, sans-serif;
            margin: 0;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: pink;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        h1 {
            color: #333;
            margin-bottom: 20px;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }

        .cell {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100px;
            height: 100px;
            background: #f4f4f4;
            border-radius: 5px;
            font-size: 2rem;
            cursor: pointer;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s;
        }

        .cell:hover {
            transform: scale(1.05);
        }

        .cell.taken {
            pointer-events: none;
            background: #ddd;
        }

        .status {
            margin-top: 20px;
            font-size: 1.2rem;
            color: #555;
        }

        .restart {
            margin-top: 10px;
            padding: 10px 20px;
            font-size: 1rem;
            background-color: #00c9a7;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .restart:hover {
            background-color: #00a086;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tic Tac Toe</h1>
        <div class="board" id="board"></div>
        <div class="status" id="status">Player X's turn</div>
        <button class="restart" onclick="restartGame()">Restart Game</button>
    </div>

    <script>
        const boardElement = document.getElementById('board');
        const statusElement = document.getElementById('status');
        let board = Array(9).fill(null);
        let currentPlayer = 'X';
        let gameActive = true;

        function createBoard() {
            boardElement.innerHTML = '';
            board.forEach((cell, index) => {
                const cellElement = document.createElement('div');
                cellElement.classList.add('cell');
                cellElement.dataset.index = index;
                cellElement.addEventListener('click', handleCellClick);
                cellElement.textContent = cell || '';
                boardElement.appendChild(cellElement);
            });
        }

        function handleCellClick(e) {
            const index = e.target.dataset.index;
            if (!gameActive || board[index]) return;

            board[index] = currentPlayer;
            e.target.textContent = currentPlayer;
            e.target.classList.add('taken');

            if (checkWinner()) {
                statusElement.textContent = `Player ${currentPlayer} wins! 🎉`;
                gameActive = false;
                return;
            }

            if (board.every(cell => cell)) {
                statusElement.textContent = 'It is a draw! 🤝';
                gameActive = false;
                return;
            }

            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            statusElement.textContent = `Player ${currentPlayer}'s turn`;
        }

        function checkWinner() {
            const winningCombinations = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8],
                [0, 3, 6], [1, 4, 7], [2, 5, 8],
                [0, 4, 8], [2, 4, 6]
            ];

            return winningCombinations.some(combination => {
                const [a, b, c] = combination;
                return board[a] && board[a] === board[b] && board[a] === board[c];
            });
        }

        function restartGame() {
            board = Array(9).fill(null);
            currentPlayer = 'X';
            gameActive = true;
            statusElement.textContent = `Player ${currentPlayer}'s turn`;
            createBoard();
        }

        createBoard();
    </script>
</body>
</html>
